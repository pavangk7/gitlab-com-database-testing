stages:
  - prepare
  - test
  - final

default:
  timeout: 300m

variables:
  RAILS_ENV: "test"
  GITLAB_PATH: "/gitlab"
  GITLAB_COMMIT_SHA: "master"
  IMAGE_NAME: "gitlab-com-database-testing:${GITLAB_COMMIT_SHA}"

.image:base:
  stage: prepare
  tags:
    - builder

.rules:if-decomposed:
  rules:
    - if: '$RUN_DECOMPOSED == "true"'

.rules:if-not-decomposed:
  rules:
    - if: '$RUN_DECOMPOSED == null || $RUN_DECOMPOSED != "true"'

image:gitlab:
  extends: .image:base
  script:
    - docker build --build-arg GITLAB_COMMIT_SHA=${GITLAB_COMMIT_SHA} -t ${IMAGE_NAME} docker/gitlab
    - docker tag ${IMAGE_NAME} ${DOCKER_REGISTRY}/${IMAGE_NAME}
    - docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}

image:dblab-ssh:
  extends: .image:base
  variables:
    IMAGE_NAME: "gitlab-com-database-testing-dblab-ssh:latest"
  script:
    - docker build -t ${IMAGE_NAME} docker/dblab-ssh
    - docker tag ${IMAGE_NAME} ${DOCKER_REGISTRY}/${IMAGE_NAME}
    - docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}

image:redis:
  extends: .image:base
  variables:
    IMAGE_NAME: "redis:4.0-alpine"
  script:
    - docker pull $IMAGE_NAME
    - docker tag ${IMAGE_NAME} ${DOCKER_REGISTRY}/${IMAGE_NAME}
    - docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}

.db:migrations:base:
  stage: test
  image: ${DOCKER_REGISTRY}/$IMAGE_NAME
  tags:
    - worker
  variables:
    DBLAB_HOST_KEYS: $DBLAB_HOST_KEYS
    DBLAB_SSH_KEY: $DBLAB_SSH_KEY
    DBLAB_TOKEN: $DBLAB_TOKEN
    DBLAB_USER: $DBLAB_USER
    DBLAB_PASSWORD: $DBLAB_PASSWORD
    DBLAB_API_PORT: $DBLAB_API_PORT
    DBLAB_ENVIRONMENT: $DBLAB_ENVIRONMENT
    DBLAB_CLONE_ID: "database-testing-${CI_PIPELINE_ID}"
    CLONE_DETAILS_DB_NAME: "postgres" # temporary to make clone_details work with multiple databases
  artifacts:
    paths:
      - migration-testing/
    expire_in: 4 weeks
    when: always
  allow_failure: true
  script:
    - cd ${GITLAB_PATH}
    - ./prepare.sh
    - mkdir -p tmp/migration-testing
    - bundle exec rake gitlab:db:migration_testing:up | tee tmp/migration-testing/up/full-migration-output.log || true
    - mv tmp/migration-testing/ ${CI_PROJECT_DIR}
    - bundle exec ruby list_migrations.rb > ${CI_PROJECT_DIR}/migration-testing/migrations.json
    - bundle exec ruby clone_details.rb ${CLONE_DETAILS_DB_NAME} > ${CI_PROJECT_DIR}/migration-testing/clone-details.json

db:migrations:
  extends:
    - .db:migrations:base
    - .rules:if-not-decomposed
  variables:
    ALL_DB_HOSTS: "postgres"
  services:
    - name: ${DOCKER_REGISTRY}/gitlab-com-database-testing-dblab-ssh:latest
      alias: postgres
    - name: ${DOCKER_REGISTRY}/redis:4.0-alpine
      alias: redis

db:migrations decomposed:
  extends:
    - .db:migrations:base
    - .rules:if-decomposed
  variables:
    ALL_DB_HOSTS: "postgres-main,postgres-ci"
    CLONE_DETAILS_DB_NAME: "postgres-main" # Temporary to make clone_details script work
  services:
    - name: ${DOCKER_REGISTRY}/gitlab-com-database-testing-dblab-ssh:latest
      alias: postgres-main
      variables:
        DBLAB_CLONE_ID: "database-testing-${CI_PIPELINE_ID}-main"
    - name: ${DOCKER_REGISTRY}/gitlab-com-database-testing-dblab-ssh:latest
      alias: postgres-ci
      variables:
        DBLAB_CLONE_ID: "database-testing-${CI_PIPELINE_ID}-ci"
    - name: ${DOCKER_REGISTRY}/redis:4.0-alpine
      alias: redis

notify-upstream:
  stage: final
  tags:
    - builder
  # Also store artifacts here so we can easily generate direct links to them
  artifacts:
    paths:
      - migration-testing/
    expire_in: 4 weeks
    when: always
  script:
    - cd notifier
    - bundle install
    - bundle exec ruby notifier.rb send ../migration-testing/
